package com.katsuna.clock.alarm;

import android.support.annotation.NonNull;
import android.support.annotation.VisibleForTesting;

import com.katsuna.clock.R;
import com.katsuna.clock.data.Alarm;
import com.katsuna.clock.data.AlarmStatus;
import com.katsuna.clock.data.AlarmType;
import com.katsuna.clock.data.source.AlarmsDataSource;
import com.katsuna.clock.services.utils.IAlarmsScheduler;
import com.katsuna.clock.validators.IAlarmValidator;
import com.katsuna.clock.validators.ValidationResult;

import org.threeten.bp.LocalDateTime;
import org.threeten.bp.LocalTime;
import org.threeten.bp.format.DateTimeFormatter;

import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;

class ManageAlarmPresenter implements ManageAlarmContract.Presenter,
        AlarmsDataSource.GetAlarmCallback {

    @NonNull
    private final AlarmsDataSource mAlarmsDataSource;

    @NonNull
    private final ManageAlarmContract.View mManageAlarmView;

    @NonNull
    private final IAlarmValidator mAlarmValidator;

    private final long mAlarmId;

    @NonNull
    private final IAlarmsScheduler mAlarmsScheduler;
    private AlarmType mAlarmType;

    private boolean mIsDataMissing = true;
    private ManageAlarmStep mStep = ManageAlarmStep.DESCRIPTION;
    private long mAlarmIdAutogenerated;

    public ManageAlarmPresenter(long alarmId, AlarmType alarmType,
                                @NonNull AlarmsDataSource alarmsDataSource,
                                @NonNull ManageAlarmContract.View manageAlarmView,
                                @NonNull IAlarmValidator alarmValidator,
                                @NonNull IAlarmsScheduler alarmsScheduler) {
        mAlarmId = alarmId;
        mAlarmType = alarmType;
        mAlarmsDataSource = checkNotNull(alarmsDataSource, "dataSource cannot be null");
        mManageAlarmView = checkNotNull(manageAlarmView, "manageAlarmView cannot be null!");
        mAlarmValidator = checkNotNull(alarmValidator, "alarmValidator cannot be null!");
        mAlarmsScheduler = checkNotNull(alarmsScheduler, "alarmsScheduler cannot be null!");

        mManageAlarmView.setPresenter(this);
    }

    @Override
    public void start() {
        if (!isNewAlarm() && mIsDataMissing) {
            populateAlarm();
        } else {
            adjustType();
            initTime();
            mManageAlarmView.setDefaultRingtone();
            mManageAlarmView.setDefaultVibrate();
        }
    }

    private void adjustType() {
        if (mAlarmType == AlarmType.ALARM) {
            mManageAlarmView.showDescriptionStep(false);
            mManageAlarmView.setTitle(isNewAlarm() ? R.string.add_new_alarm_title :
                    R.string.edit_alarm_title);
            mManageAlarmView.setAlarmTimeTitle(R.string.set_alarm_time);
            showStep(ManageAlarmStep.TIME);
        } else {
            mManageAlarmView.showDescriptionStep(true);
            mManageAlarmView.setTitle(isNewAlarm() ? R.string.add_new_reminder_title :
                    R.string.edit_reminder_title);
            mManageAlarmView.setAlarmTimeTitle(R.string.set_reminder_time);
        }
    }

    private void initTime() {
        LocalDateTime now = LocalDateTime.now();
        mManageAlarmView.setTime(now.format(DateTimeFormatter.ofPattern("HH")),
                now.format(DateTimeFormatter.ofPattern("mm")));
    }

    @Override
    public void saveAlarm(String description, String hour, String minute,
                          boolean mondayEnabled, boolean tuesdayEnabled, boolean wednesdayEnabled,
                          boolean thursdayEnabled, boolean fridayEnabled, boolean saturdayEnabled,
                          boolean sundayEnabled, @NonNull String ringtoneUri,
                          boolean vibrateEnabled) {
        List<ValidationResult> results = mAlarmValidator.validateAll(mAlarmType, description, hour,
                minute);
        if (results.size() == 0) {
            // all good, move on
            Alarm alarm;
            if (isNewAlarm()) {
                alarm = new Alarm(mAlarmType, Integer.parseInt(hour), Integer.parseInt(minute),
                        description, mondayEnabled, tuesdayEnabled, wednesdayEnabled, thursdayEnabled,
                        fridayEnabled, saturdayEnabled, sundayEnabled, AlarmStatus.ACTIVE,
                        ringtoneUri, vibrateEnabled);
            } else {
                alarm = new Alarm(mAlarmIdAutogenerated, mAlarmType, Integer.parseInt(hour),
                        Integer.parseInt(minute), description, mondayEnabled, tuesdayEnabled,
                        wednesdayEnabled, thursdayEnabled, fridayEnabled, saturdayEnabled,
                        sundayEnabled, AlarmStatus.ACTIVE, ringtoneUri, vibrateEnabled);
            }
            mAlarmsDataSource.saveAlarm(alarm);
            mAlarmsScheduler.reschedule(alarm);
            mManageAlarmView.showAlarmsList(alarm);
        } else {
            mManageAlarmView.showValidationResults(results);
        }
    }

    @Override
    public void populateAlarm() {
        if (isNewAlarm()) {
            throw new RuntimeException("populateAlarm() was called but alarm is new.");
        }
        mAlarmsDataSource.getAlarm(mAlarmId, this);
    }

    public boolean isDataMissing() {
        return mIsDataMissing;
    }

    @Override
    public void previousStep() {
        ManageAlarmStep previousStep = null;
        switch (mStep) {
            case TIME:
                previousStep = ManageAlarmStep.DESCRIPTION;
                break;
            case DAYS:
                previousStep = ManageAlarmStep.TIME;
                break;
            case OPTIONS:
                previousStep = ManageAlarmStep.DAYS;
                break;
        }

        if (previousStep != null) {
            mStep = previousStep;
            showStep(previousStep);
        }
    }

    @Override
    public void validateAlarmTypeInfo(AlarmType alarmType, String description) {
        List<ValidationResult> results = mAlarmValidator.validateAlarmType(alarmType, description);
        if (results.size() == 0) {
            showStep(ManageAlarmStep.TIME);
        } else {
            mManageAlarmView.showValidationResults(results);
        }
    }

    @Override
    public void validateAlarmTime(String hour, String minute) {
        List<ValidationResult> results = mAlarmValidator.validateTime(hour, minute);
        if (results.size() == 0) {
            showStep(ManageAlarmStep.DAYS);
        } else {
            mManageAlarmView.showValidationResults(results);
        }
    }

    @VisibleForTesting
    @Override
    public void showStep(ManageAlarmStep step) {
        mStep = step;
        switch (step) {
            case DESCRIPTION:
                mManageAlarmView.showDescriptionControl(true);
                mManageAlarmView.showAlarmTimeControl(false);
                mManageAlarmView.showPreviousStepFab(false);
                mManageAlarmView.showAlarmOptionsControl(false);
                mManageAlarmView.showNextStepFab(true);
                break;
            case TIME:
                mManageAlarmView.showDescriptionControl(false);
                mManageAlarmView.showAlarmTimeControl(true);
                mManageAlarmView.showAlarmDaysControl(false);
                mManageAlarmView.showAlarmOptionsControl(false);
                if (mAlarmType == AlarmType.ALARM) {
                    mManageAlarmView.showPreviousStepFab(false);
                    mManageAlarmView.showNextStepFab(true);
                } else {
                    mManageAlarmView.showPreviousStepFab(true);
                    mManageAlarmView.showNextStepFab(true);
                }
                break;
            case DAYS:
                mManageAlarmView.showPreviousStepFab(true);
                mManageAlarmView.showDescriptionControl(false);
                mManageAlarmView.showAlarmTimeControl(false);
                mManageAlarmView.showAlarmDaysControl(true);
                mManageAlarmView.showAlarmOptionsControl(false);
                mManageAlarmView.hideKeyboard();
                break;
            case OPTIONS:
                mManageAlarmView.showPreviousStepFab(true);
                mManageAlarmView.showDescriptionControl(false);
                mManageAlarmView.showAlarmTimeControl(false);
                mManageAlarmView.showAlarmDaysControl(false);
                mManageAlarmView.showAlarmOptionsControl(true);
                break;
        }
        mManageAlarmView.adjustFabPositions(step);
    }

    @Override
    public ManageAlarmStep getCurrentStep() {
        return mStep;
    }

    @Override
    public void addHours(String hour, int hours) {
        int h = Integer.parseInt(hour);
        LocalTime time = LocalTime.of(h, 0).plusHours(hours);
        mManageAlarmView.setHour(time.format(DateTimeFormatter.ofPattern("HH")));
    }

    @Override
    public void addMinutes(String minute, int minutes) {
        int min = Integer.parseInt(minute);
        LocalTime time = LocalTime.of(0, min).plusMinutes(minutes);
        mManageAlarmView.setMinute(time.format(DateTimeFormatter.ofPattern("mm")));
    }

    @Override
    public AlarmType getAlarmType() {
        return mAlarmType;
    }

    private boolean isNewAlarm() {
        return mAlarmId == 0;
    }

    @Override
    public void onAlarmLoaded(Alarm alarm) {
        mAlarmIdAutogenerated = alarm.getAlarmId();
        mAlarmType = alarm.getAlarmType();
        mManageAlarmView.loadAlarm(alarm);
        mIsDataMissing = false;
        adjustType();
    }

    @Override
    public void onDataNotAvailable() {
        mManageAlarmView.showEmptyAlarmError();
    }
}
